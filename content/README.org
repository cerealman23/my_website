#+TITLE: My Emacs Configuration
#+AUTHOR: Malcolm Kahora
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

#+TITLE: My Emacs Configuration
#+AUTHOR: Malcolm Kahora

* Initial Start Up
** Remove Scroolbar
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>
   #+begin_src emacs-lisp

     (scroll-bar-mode -1)

   #+end_src
** Remove tool bar
   #+begin_src emacs-lisp

     (tool-bar-mode -1)


   #+end_src
** Remove tooltip mode
   #+begin_src emacs-lisp

     (tooltip-mode -1)

   #+end_src
** Add margin
   #+begin_src emacs-lisp

(set-fringe-mode 50)

   #+end_src
** Remove menu-bar
   #+begin_src emacs-lisp

(menu-bar-mode -1)

   #+end_src
** Auto update

#+begin_src emacs-lisp
(auto-revert-mode t)
#+end_src
* General Set Up
** Registers
   #+begin_src emacs-lisp


     ; registers
     (set-register ?i (cons 'file "/home/malcolm2/.emacs.d/README.org"))
     (set-register ?l (cons 'file "/mnt/c/Home/SophmoreYear_Fall/Linear_Algebra_Homework/labs/"))
     (set-register ?t (cons 'file "c:/Users/mango/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/"))
(set-register ?w (cons 'file "~/test_website"))


   #+end_src
** KeyBings
#+begin_src emacs-lisp

  (org-babel-load-file
   (expand-file-name "macros.el"
    user-emacs-directory))

#+end_src
** Local Varibles Warning

Pops a mini buffer before evaluating local varibles

#+begin_src emacs-lisp

(setq enable-local-variables t)

#+end_src
* use-package
** contacts package hosts
   #+begin_src emacs-lisp


(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))



   #+end_src
** Initializes packages
   
   #+begin_src emacs-lisp


(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))


   #+end_src

* Packages
** Ivy

Use ivy-occur to store ivy completion into a buffer keybinding: C-c C-o

My favorite completion framework for files.  *TIP* use M-o for actions you can perform on files.
*** Main Ivy Config
    #+begin_src emacs-lisp


(use-package ivy
  :diminish                           ;; gets rid of bottom mode name
  :ensure t
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map     ;; use key bindings during certain modes
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :init
  (ivy-mode 1)) ;; uses ivy mode and default key bindings such as +b



    #+end_src
*** Ivy Rich
Adds rich descriptions to functions in minibuffer
#+begin_src emacs-lisp

(use-package ivy-rich
  :ensure t
  :init
  (ivy-rich-mode 1))


#+end_src
** Which key
When typing a command bring up a pop up of all the possible key completions

#+begin_src emacs-lisp

(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))     ;; delay before it pops up in sec


#+end_src
** Magit
   #+begin_src emacs-lisp


     (use-package magit


       :ensure t

  

       ; replace current window with magit
       :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
       :config
       :bind (("C-x g" . magit)))


   #+end_src

** Counsel
   #+begin_src emacs-lisp

(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history)))

   #+end_src

** Helpful

This is just better help buffers when using C-h
   
   #+begin_src emacs-lisp


(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))


   #+end_src

** Company
Auto complete package, very good for the C family
#+begin_src emacs-lisp

  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3) ; after 3 charecters auto complete
    (global-company-mode t) ; so company mode is on 24/7
    (define-key company-active-map (kbd "C-j") 'company-select-next)
  (define-key company-active-map (kbd "C-k") 'company-select-previous)
  (define-key company-search-map (kbd "C-j") 'company-select-next)
  (define-key company-search-map (kbd "C-k") 'company-select-previous))

#+end_src

** yasnippet
   This package is great for creating small text shortcuts for common words or expressions
   #+begin_src emacs-lisp


     (use-package yasnippet
       :ensure t
       :init
       :config (use-package yasnippet-snippets
                 :ensure t)
       (yas-reload-all))

                                             ; these hooks enable yas based onw hat mode you in

     (add-hook 'org-mode-hook #'yas-minor-mode)
     (add-hook 'org-roam-mode-hook 'yas-minor-mode)
     (add-hook 'c++-mode-hook 'yas-minor-mode)
     (add-hook 'c-mode 'yas-minor-mode)
     (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)

   #+end_src

** beacon
#+begin_src emacs-lisp

  ;(beacon-mode t)
;(beacon-size 90)

#+end_src

** Projectile
A project management package for emacs super well designed and very useful.  Can test the project find all files in the project and other projected centered functions.  You can set local project varibles with C-p E and run it with M-: (hack- local varibles.

Set counsel-projectile-git-grep to a custom key binding its super useful (Only if ripgrep is installed

#+begin_src emacs-lisp

  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))  ; I uses Ivy there are other options at projectile-completion-system
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "/mnt/c/Users/mango/Documents/") ; When this directory exists set the projectile-project-search-path to that value below
      (setq projectile-project-search-path '("/mnt/c/Users/mango/Documents/")))
    (setq projectile-switch-project-action #'dired)) 



#+end_src

*** Counsel projectile

Better actions withe Ivy and Projectile

#+begin_src emacs-lisp

    (use-package counsel-projectile
      :ensure t
      :config (counsel-projectile-mode))

#+end_src

* Buffer Management
  
** Ibuffer
   #+begin_src emacs-lisp

(global-set-key (kbd "C-x C-b") 'ibuffer)

   #+end_src
* Window Manager
** Ace
   #+begin_src emacs-lisp

  
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0 :foreground "blue")))))
    ))




   #+end_src
* Themes
** gruv-box
   #+begin_src emacs-lisp


(use-package gruvbox-theme
  :ensure t)


   #+end_src
** zenburn
#+begin_src emacs-lisp


  (use-package zenburn-theme
    :ensure t)

#+end_src
** All the icons
   #+begin_src emacs-lisp


(use-package all-the-icons
  :ensure t)

   #+end_src
** Doom themes
#+begin_src emacs-lisp
      (use-package doom-themes
        :ensure t
        :config
        ;; Global settings (defaults)

        ;;my favorite so far is doom-one and doom-laserwave 
    ; actually its acario-light

  ; my new favorite is doom-ephmeral
    
        (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
              doom-themes-enable-italic t) ; if nil, italics is universally disabled
        (load-theme 'doom-one t)

        ;; Enable flashing mode-line on errors
        (doom-themes-visual-bell-config)
        ;; Enable custom neotree theme (all-the-icons must be installed!)
        (doom-themes-neotree-config)
        ;; or for treemacs users
        (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
        (doom-themes-treemacs-config)
        ;; Corrects (and improves) org-mode's native fontification.
        (doom-themes-org-config))
#+end_src

** require theme
   #+begin_src emacs-lisp

     ;;          (custom-set-variables
     ;;           ;; custom-set-variables was added by Custom.
     ;;           ;; If you edit it by hand, you could mess it up, so be careful.
     ;;           ;; Your init file should contain only one such instance.
     ;;           ;; If there is more than one, they won't work right.
     ;;           '(custom-enabled-themes '(gruvbox-light-soft))
     ;;           '(custom-safe-themes
     ;;             '("4eb6fa2ee436e943b168a0cd8eab11afc0752aebb5d974bba2b2ddc8910fca8f" default)))

     ;; ; for custom org roam link colors






   #+end_src
* UI
** Doom mode line
   #+begin_src emacs-lisp


     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1)
       :custom ((doom-modeline-height 10)))


   #+end_src
** Rainbow Delimiters
   Nice rainbow matching parenthesis
   #+begin_src emacs-lisp

     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode . rainbow-delimiters-mode))


   #+end_src
* Org  
** General Set Up
#+begin_src emacs-lisp


	  (use-package org
	    :ensure t
	      :hook (org-mode . dw/org-mode-setup)
	    :config
	    (setq org-ellipsis " ▾"
		  org-hide-emphasis-markers t)

	    (setq org-agenda-files
	'("/mnt/c/Home/OrgAgenda/tasks.org"
	  "/mnt/c/Home/OrgAgenda/birthdays.org"
	  "/mnt/c/Home/OrgAgenda/Homework.org"
	  "/mnt/c/Home/OrgAgenda/Events.org"))
)


   #+end_src

*** Custom Size
    This inhibits org mode images not scaling
    #+begin_src emacs-lisp



(setq org-image-actual-width nil)



    #+end_src

*** Org start up
    Custom function for some org files cleaning and formating
    #+begin_src emacs-lisp
(defun dw/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode nil)
  (visual-line-mode nil))

    #+end_src
** CV

Here I want to use org mode to make my resume [[https://titan-c.gitlab.io/org-cv/][link]]

This is a package that adds a CV export

#+begin_src emacs-lisp

  (use-package ox-moderncv

      :load-path "~/org-cv/"
    :ensure t
      :init (require 'ox-moderncv))

#+end_src


Custom export

#+begin_src emacs-lisp

  (defun mk/export-resume ()

  (interactive)
    (org-export-to-file 'moderncv "moderncv.tex")
    (org-latex-compile "moderncv.tex")

    )

#+end_src

** Global Bindings
   #+begin_src emacs-lisp

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

   #+end_src  
** Org capture templates

A few templates I use which work well with org-gcal

#+begin_src emacs-lisp

(setq org-capture-templates
      '(("t" "Todo" entry (file "/mnt/c/Home/OrgAgenda/Tasks.org")
	 "* TODO %^{Task}\n:PROPERTIES:\n:END:\n:org-gcal:\nSCHEDULED: %^{When to do}t\n:END:")

	("e" "Event" entry (file "/mnt/c/Home/OrgAgenda/Events.org")
	 "* %^{Event name}\n :PROPERTIES:\n:END:\n:org-gcal:\n%^{When}t\n:END:")
	
      ("h" "Homework" entry (file "/mnt/c/Home/OrgAgenda/Homework.org")
	 "* %^{Description} - %^{Class|Creative Design |Analysis of Algorithims |Computer Architecture |Linear Algebra|199 Seminar }\n :PROPERTIES:\n:END:\n:org-gcal:\nSCHEDULED: %^{Due Date}t \n:END:")))

#+end_src
** Org-bullets
   #+begin_src emacs-lisp

  
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode)
  :custom (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


   #+end_src
** Org Roam
   
*** hooks
#+begin_src emacs-lisp

    (add-hook 'org-roam-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode) ; So fly spell is turned on every time org-mode is started

#+end_src
*** Initial package
    #+begin_src emacs-lisp


            (use-package org-roam
              :ensure t
              :init
              (setq org-roam-v2-ack t)
              :custom
              (org-roam-directory "/mnt/c/Home/roamnotes")
              (org-roam-completion-everywhere t)
              (org-roam-capture-templates




            ;; templates



               '(("d" "default" plain
                  "%?"
                  :if-new (file+head "%<%y%m%d%h%m%s>-${slug}.org" "#+title: ${title}\n")
                  :unnarrowed t)

               ("l" "programming language" plain
                "* characteristics\n\n- family: \n- inspired by: \n\n* reference:\n* examples:%?"
                :if-new (file+head "%<%y%m%d%h%m%s>-${slug}.org" "#+title: ${title}\n")
                :unnarrowed t)

               ("b" "book notes" plain
                "\n* source\n\nauthor: %^{author}\ntitle: ${title}\nyear: %^{year}\n\n* summary\n\n%?"
                :if-new (file+head "%<%y%m%d%h%m%s>-${slug}.org" "#+title: ${title}\n")
                :unnarrowed t)

              ("h" "homework" entry (file+headline "/mnt/c/Home/orgagenda/homework.org" "homework")
            "* %? %^l %^g \n%t" :prepend t)
            ("w" "work" entry (file+headline "/mnt/c/Home/orgagenda/work.org" "work at mtss")
            "* %?\n%t" :prepend t)
            ("t" "to do item" entry (file+headline "/mnt/c/Home/orgagenda/i.org" "to do")
            "* todo %?\n%u" :prepend t)))


      ; capture templates
	
                ;; bindings


              :bind (("C-c n l" . org-roam-buffer-toggle)
                     ("C-c n f" . org-roam-node-find)
                     ("C-c n i" . org-roam-node-insert)
                     :map org-mode-map
                     ("C-S-i" . completion-at-point))
              :config
              (org-roam-setup))


    #+end_src 
** Org Babel
   For setting up how emacs code block are evaluated and which can be evaulated. [[https://magit.vc/manual/magit/Stashing.html][magit]]
   #+begin_src emacs-lisp

          (with-eval-after-load 'org
            (org-babel-do-load-languages
                'org-babel-load-languages
                '((emacs-lisp . t)
                (python . t) (C . t)  (octave . t)))

            (push '("conf-unix" . conf-unix) org-src-lang-modes))
     ; This makes sure no prompt sets up when we evaulute a src block
     (setq org-confirm-babel-evaluate nil)

   #+end_src
*** Structure Templates
    These let you use org temp and set custom auto completes for source blocks.
    #+begin_src emacs-lisp

                  (with-eval-after-load 'org
                    ;; This is needed as of Org 9.2
                    (require 'org-tempo)

                    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
                    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
                    (add-to-list 'org-structure-template-alist '("py" . "src python"))
            (add-to-list 'org-structure-template-alist '("cde" . "src C"))

            (add-to-list 'org-structure-template-alist '("oct" . "src octave")))

    #+end_src
    

* TODO MatLab
Lisp for running matlab in its own shell
** Mode
#+begin_src emacs-lisp

    ; (add-to-list 'load-path "~/.matlab-mode")
    ; (load-library "matlab-load")

#+end_src
* Terminals

Term mode doesnt work on windows.  term mode works best with GNU systems.  Im currently using it on WSL2.  Term mode uses elisp language to run the terminal which is why it is fairly slow.

** term
Term mode needs to be quir with C-d before using normal functions

C-c C-k for char mode which diables emacs inpu
C-c C-j for line modw hich enables it

#+begin_src emacs-lisp


    (use-package term
      :ensure t
    :config
      (setq explicit-shell-file-name "bash")
  ; term-promp-regexp looks for a typical bash prompt and jumps to the last promp
  
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%] *")
    )

#+end_src

*** term-mode color

Gives term mode better colors or complete access to linux terminals color pallete

#+begin_src emacs-lisp

  (use-package eterm-256color

    :ensure t
    :hook (term-mode . eterm-256color-mode)

    )

#+end_src

** Ansi term

Ansii term allows you to open multiple term buffers.  Without term would default to open buffer unless you name the buffer uniquely.

** Vterm

Need libtool-bin, libtool, and  cmake, and other dependencies see Vterm documentation.  This is what I needed on Ubuntu

Vterm is faster as its wriiten in C while term is in lisp

#+begin_src emacs-lisp


  (use-package vterm
  :ensure t
    :commands vterm
    :config
    ;;(setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

** eshell

type use-theme into eshell to see all the possible themes

#+begin_src emacs-lisp
  (use-package eshell-git-prompt
    :ensure t)

  (use-package eshell
  :hook (eshell-first-time-mode . efs/configure-eshell)
    :config
    (eshell-git-prompt-use-theme 'powerline)

    )


#+end_src

*** Eshell configuring
To much buffer length slows down performance. so line [[(max-buf-lines)]] stores the max amount of lines in a buffer.  Also on line [[(input-scroll)]]

#+begin_src emacs-lisp


  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000  ;		    (ref:max-buf-lines)
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t)) 	;	     (ref:input-scroll)

#+end_src

You can pipe in eshell to a buffer

#+begin_src shell

echo "hello" > #<buffer buffer-name>

#+end_src

* website-publishing

** local host
#+begin_src emacs-lisp

    (use-package simple-httpd
      :ensure t)

#+end_src

* Programming

** LSP
LSP stand for Language-Server-Protocal and call in language servers allowing one to make a custom IDE (Very cool :D )
I just copied the config I needed from therir [[https://emacs-lsp.github.io/lsp-mode/page/installation/][page]]

#+begin_src emacs-lisp

  (use-package lsp-mode
  :ensure t
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (c-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
#+end_src

lsp for ivy-framework
#+begin_src emacs-lisp



  (use-package lsp-ivy
  :ensure t
    :commands lsp-ivy-workspace-symbol)



#+end_src

lsp for treemacs

#+begin_src emacs-lisp

  ;; (use-package lsp-treemacs
  ;; :ensure t
  ;;   :commands lsp-treemacs-errors-list)

#+end_src

lsp for company

#+begin_src emacs-lisp


  ;; (use-package company-lsp
  ;;   :ensure t
  ;;   :config
  ;;   (push 'company-lsp company-backends))

#+end_src

** ccls

Complicated way to install ccls (I need to make an instruction guide)

#+begin_src emacs-lisp

(use-package ccls
  :ensure t
  :config
  (setq ccls-executable "ccls")
  (setq lsp-prefer-flymake nil)
  (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
  :hook ((c-mode c++-mode objc-mode) .
         (lambda () (require 'ccls) (lsp))))

#+end_src

* RSS

** Elfeed
This package makes reading and seeing RSS fields much easier
#+begin_src emacs-lisp

  ;; Configure Elfeed
  (use-package elfeed
    :ensure t
    :config
    (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
          elfeed-show-entry-switch 'display-buffer)
    :bind
    ("C-x w" . elfeed ))

#+end_src

*** Elfeed org
This package converts org files to a readable file for elread.  The :elfeed: tag applys to all lower levels as well

#+begin_src emacs-lisp

  ;; Configure Elfeed with org mode
  (use-package elfeed-org
    :ensure t
    :config
   (setq elfeed-show-entry-switch 'display-buffer)
   (setq rmh-elfeed-org-files (list "elfeed.org")))

#+end_src

* Browser
#+begin_src emacs-lisp

(setq browse-url-browser-function 'browse-url-firefox)

#+end_src

